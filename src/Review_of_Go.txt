Readability: 6
	Since Go is a C-like language, there are some obvious similarities to languages like C++ and Java. However, some of the things
	that makes Go unique also make it hard to read at a glance. The only loop structure is a for loop, which can be modified in MANY different ways to provide various looping functions (such as the traditional while loop). A type can be declared explicitly (in the format "var <identifier> <type> = value") or inferred ("identifier := value"), which can lead to some confusion at first.
Writability: 5
	Go has some intuitive features like ":=" (which is shorthand variable declaration with inferred assignment) and multiple returns
	from a function. These make Go feel "natural" when writing code and it gives the programmer a sense of progress and accomplishment.
	However it seems for every convenience Go offers, there are two annoyances that plague the language. For example slices are, on the
	surface, very simple: arrays with variable sizes. However there are many slight caveats with slices that will trip up the programmer in their implementation (like the difference between [0]a, a[0], and b[0] where a is a slice and b is an array).
Reliability: 9
	 Robert Griesemer, Rob Pike, and Ken Thompson wrote Go with reliability in mind. Every structure in the language is seemingly designed not to work unless used absolutely correctly. I had more trouble getting my code to compile than I did with bug fixing, simply because the language forced me to write "correct" code. For example, I used a method from the "os" packaged called ".Open()" to open a file. This method actually returns two seperate values: the opened file, and an error code. This actually FORCED me to implement error handling code because otherwise, my code would not even compile!
Cost: 7
	While the language may come free of cost, programmers will definitely need to be trained in the language by someone who is already proficient. Go's website provides some tutorials and documentation, but you absolutely cannot rely on just these to become fluent. Even after completing the tutorial, I had to have my nose constantly in documentation or in a forum to understand what I was doing, right or wrong. This is something that is incredibly time consuming and in a professional environment, the man-hours expense would be unjustifiable.

Grade: 27/40
	I really like Go, I think it's a language that is most definitely on the right track to completely replacing C/C++ and Java in the future. I can say this with confidence because the design of the language is most definitely "smart" in that good code is almost a guarantee in the language if you can successfully compile. Yet as well designed as it may be functionally, it's incredibly upsetting to see Go suffer from readability and writability issues that absolutely shouldn't be in modern languages. Ken Thompson saw Go as an opprotunity to look at C++ and toss out everything considered outdated or absurdly obtuse, yet it feels as though in that process Go accumulated it's own features that feel the same way.